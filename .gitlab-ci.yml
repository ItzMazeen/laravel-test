image: php:8.1

stages:
  - deploy_cloudflare
  - test
  - security
  - parser
  - deploy_PREPROD
  - PREPROD_security
  - deploy_PROD
  - deploy_artifacts

cache:
  key: composer
  paths:
    - vendor/
  policy: pull

deploy_subdomain:
  stage: deploy_cloudflare
  image: python:3.10-alpine
  script:
    - pip install requests
    - export SUBDOMAIN="$CI_PROJECT_NAME"
    - python scripts/create_subdomain.py
  variables:
    CLOUDFLARE_API_TOKEN: "$CLOUDFLARE_API_TOKEN"
    CLOUDFLARE_ZONE_ID: "$CLOUDFLARE_ZONE_ID"
    CLOUDFLARE_IP_ADDRESS: "$CLOUDFLARE_IP_ADDRESS"
    CLOUDFLARE_BASE_DOMAIN: "$CLOUDFLARE_BASE_DOMAIN"

phpunit_tests:
  stage: test
  image: php:8.3.20-cli-alpine3.20
  before_script:
    - apt-get update && apt-get install -y unzip git libzip-dev libonig-dev libxml2-dev
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    - composer install --prefer-dist --no-progress --no-interaction
  script:
    - vendor/bin/phpunit --testdox-html=phpunit-report.html --log-junit phpunit.xml || true
  artifacts:
    when: always
    reports:
      junit: phpunit.xml
    paths:
      - phpunit.xml
      - phpunit-report.html

sonarqube_scan_and_analysis:
  stage: test
  image: debian:bullseye
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
    SONAR_JS_NODE_MAX_MEMORY: "1024"
  before_script:
    - apt-get update && apt-get install -y curl bash jq unzip openjdk-17-jre
    - curl -sSLO https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
    - unzip sonar-scanner-cli-5.0.1.3006-linux.zip
    - export PATH="$PWD/sonar-scanner-5.0.1.3006-linux/bin:$PATH"
  script:
    - sonar-scanner
      -Dsonar.projectKey=$SONAR_PROJECT_KEY
      -Dsonar.sources=.
      -Dsonar.host.url=$SONAR_HOST_URL
      -Dsonar.login=$SONAR_TOKEN

    - echo "Waiting for SonarQube to finish analysis..."
    - sleep 60

    - bash scripts/fetch-sonarqube-issues.sh "$SONAR_HOST_URL" "$SONAR_TOKEN" "$SONAR_PROJECT_KEY"

  artifacts:
    paths:
      - sonar-report.json
  allow_failure: true

sonar_report_parser:
  stage: parser
  image: alpine:latest
  needs:
    - job: sonarqube_scan_and_analysis
      artifacts: true
  script:
    - apk add --no-cache jq
    - |
      echo '<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><title>SonarQube Detailed Issue Report</title><style>body{font-family:Arial,sans-serif;margin:20px;}h1{color:#2c3e50;}table{border-collapse:collapse;width:100%;}th,td{border:1px solid #ddd;padding:8px;text-align:left;}th{background-color:#f2f2f2;}</style></head><body>' > sonar-report.html
      echo '<h1>SonarQube Issues Report</h1><table>' >> sonar-report.html
      echo '<tr><th>Type</th><th>Severity</th><th>Message</th><th>Component</th><th>Line</th></tr>' >> sonar-report.html
      jq -r '.issues[] | "<tr><td>\(.type)</td><td>\(.severity)</td><td>\(.message | gsub("<";"&lt;") | gsub(">";"&gt;"))</td><td>\(.component)</td><td>\(.line // "N/A")</td></tr>"' sonar-report.json >> sonar-report.html
      echo '</table></body></html>' >> sonar-report.html
    - cat sonar-report.html
  artifacts:
    paths:
      - sonar-report.html

phpstan_security:
  stage: security
  image: php:8.3.20-cli-alpine3.20
  before_script:
    - apk add --no-cache unzip git libzip-dev libxml2-dev
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    - composer install --prefer-dist --no-progress --no-interaction
  script:
    - vendor/bin/phpstan analyse --level=5 --error-format=json --memory-limit=512M app > phpstan-result.json || true
    - |
      php -r '
      $json = json_decode(file_get_contents("phpstan-result.json"), true);
      $html = "<html><head><style>table{border-collapse:collapse;}th,td{border:1px solid #ccc;padding:4px;}</style></head><body><h1>PHPStan Report</h1>";
      foreach ($json["files"] ?? [] as $file => $data) {
          $html .= "<h2>$file</h2><table><tr><th>Line</th><th>Message</th></tr>";
          foreach ($data["messages"] as $msg) {
              $line = $msg["line"] ?? "-";
              $message = htmlspecialchars($msg["message"]);
              $html .= "<tr><td>$line</td><td>$message</td></tr>";
          }
          $html .= "</table>";
      }
      if (!empty($json["errors"])) {
          $html .= "<h2>Global Errors</h2><ul>";
          foreach ($json["errors"] as $error) {
              $html .= "<li>" . htmlspecialchars($error) . "</li>";
          }
          $html .= "</ul>";
      }
      $html .= "</body></html>";
      file_put_contents("phpstan-result.html", $html);
      '
  artifacts:
    when: always
    paths:
      - phpstan-result.json
      - phpstan-result.html

snyk-scan:
  image: node:22.15.0-alpine3.21
  stage: security
  script:
    - npm install -g snyk snyk-to-html
    - snyk auth $SNYK_TOKEN
    - snyk monitor --project-name=$CI_PROJECT_NAME
    - snyk test --json | snyk-to-html -o snyk_results.html || true
  artifacts:
    when: always
    paths:
      - snyk_results.html

sast-phpcs:
  stage: security
  image: registry.gitlab.com/security-products/phpcs-security-audit:latest
  variables:
    SAST_EXPERIMENTAL_FEATURES: "true"
  script:
    - /analyzer run
  after_script:
    - |
      VERSION="${CI_COMMIT_TAG:-$CI_COMMIT_REF_NAME}-$(date +'%Y-%m-%d-%H-%M')"
      mkdir -p reports
      cp -fv gl-sast-report.json reports/sast-phpcs-${VERSION}.json
  artifacts:
    reports:
      sast: reports/sast-phpcs-*.json
    paths:
      - reports/sast-phpcs-*.json
  # allow_failure: true

sast-semgrep:
  stage: security
  image: registry.gitlab.com/security-products/semgrep:3
  script:
    - /analyzer run
  after_script:
    - |
      VERSION="${CI_COMMIT_TAG:-$CI_COMMIT_REF_NAME}-$(date +'%Y-%m-%d-%H-%M')"
      mkdir -p reports
      cp -fv gl-sast-report.json reports/sast-semgrep-${VERSION}.json
  artifacts:
    reports:
      sast: reports/sast-semgrep-*.json
    paths:
      - reports/sast-semgrep-*.json
  allow_failure: true

owasp_dependency_check:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/docker-dependency-check:latest
    entrypoint: [""]
  stage: security
  script:
    # Job will scan the project root folder
    - >
      /usr/share/dependency-check/bin/dependency-check.sh --scan "./" --format HTML
      --project "$CI_PROJECT_NAME"
  artifacts:
    when: always
    paths:
      - "./dependency-check-report.html"

parse-sast-html:
  stage: parser
  image: pcfens/sast-parser
  script:
    - |
      VERSION="${CI_COMMIT_TAG:-$CI_COMMIT_REF_NAME}-$(date +'%Y-%m-%d-%H-%M')"
      echo "Version utilisÃ©e: $VERSION"
      mkdir -p reports/html
      python /app/parse-sast.py reports/sast-phpcs-*.json > reports/html/sast-phpcs-${VERSION}.html
      python /app/parse-sast.py reports/sast-semgrep-*.json > reports/html/sast-semgrep-${VERSION}.html
  artifacts:
    paths:
      - reports/html/*.html
      - reports/*.json
    when: always
    expire_in: 30 days
  needs:
    - job: sast-phpcs
      artifacts: true
    - job: sast-semgrep
      artifacts: true

deploy_PREPROD:
  stage: deploy_PREPROD
  image: docker:stable
  services:
    - name: docker:dind
      alias: docker
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - apk add --no-cache curl bash git
  script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

    - docker build -f dockerfiles/Dockerfile.php -t itzmazeen/laravel-php:${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA} .
    - docker push itzmazeen/laravel-php:${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA}

    - docker build -f dockerfiles/Dockerfile.nginx -t itzmazeen/laravel-nginx:${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA} .
    - docker push itzmazeen/laravel-nginx:${CI_COMMIT_TAG:-$CI_COMMIT_SHORT_SHA}
zap_scan:
  stage: PREPROD_security
  image: zaproxy/zap-stable
  allow_failure: true
  script:
    - mkdir -p /zap/wrk
    - cd /zap/wrk
    - export FULL_DOMAIN="${CI_PROJECT_NAME}.${CLOUDFLARE_BASE_DOMAIN}"
    - echo "Scanning $FULL_DOMAIN"
    - zap-baseline.py -t http://$FULL_DOMAIN -r zap-report.html -I
    - cp /zap/wrk/zap-report.html /builds/pfe_devops/laravel/zap-report.html
  artifacts:
    paths:
      - zap-report.html
  rules:
    - if: "$CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /(?i)prod/"
      when: manual
    - if: "$CI_COMMIT_TAG =~ /(?i)prod/"
      when: manual
    - when: never

trivy-scan:
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  stage: PREPROD_security
  variables:
    # Provide credentials for private GitLab registry authentication
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    TRIVY_AUTH_URL: "$CI_REGISTRY"
  script:
    - echo "Downloading Trivy HTML template..."
    - wget https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl -O /tmp/html.tpl || (echo "Failed to download template!" && exit 1)
    - echo "Template content (first 10 lines):"
    - head /tmp/html.tpl

    # Scan Docker images from private GitLab Container Registry using authentication
    - trivy image --format template --template "@/tmp/html.tpl" -o trivy-laravel-report.html "$CI_REGISTRY_IMAGE/eklxpartners-php:latest"
    - trivy image --format template --template "@/tmp/html.tpl" -o trivy-nginx-report.html "$CI_REGISTRY_IMAGE/eklxpartners-nginx:latest"

    # Scan the filesystem for vulnerabilities in dependencies
    - trivy fs --format template --template "@/tmp/html.tpl" -o trivy-fs-report.html .

    # Scan configuration files (Dockerfile, K8s, etc.)
    - trivy config --format template --template "@/tmp/html.tpl" -o trivy-config-report-nginx.html dockerfiles/Dockerfile.nginx
    - trivy config --format template --template "@/tmp/html.tpl" -o trivy-config-report-php.html dockerfiles/Dockerfile.php

  artifacts:
    paths:
      - trivy-laravel-report.html
      - trivy-nginx-report.html
      - trivy-fs-report.html
      - trivy-config-report-nginx.html
      - trivy-config-report-php.html

  rules:
    - if: "$CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /(?i)prod/"
      when: manual
    - if: "$CI_COMMIT_TAG =~ /(?i)prod/"
      when: manual
    - when: never

deploy_artifacts:
  stage: deploy_artifacts
  image: alpine:latest
  script:
    - echo "ð¦ Organizing artifacts for deployment..."

    # Install necessary utilities for file handling (e.g., mv)
    - apk add --no-cache bash

    # Create destination folders if they don't exist
    - VERSION="${CI_COMMIT_TAG:-$CI_COMMIT_REF_NAME}-$(date +'%Y-%m-%d-%H-%M')"
    - mkdir -p html_reports-${VERSION} json_xml_reports-${VERSION}

    # Move HTML reports (if they exist) to the appropriate directory
    - |
      for f in phpunit-report.html sonar-report.html phpstan-result.html snyk_results.html dependency-check-report.html \
               trivy-laravel-report.html trivy-nginx-report.html trivy-fs-report.html \
               trivy-config-report-nginx.html trivy-config-report-php.html zap-report.html; do
        [ -f "$f" ] && mv "$f" html_reports-${VERSION}/ || echo "Skipped missing: $f"
      done

    # Move JSON/XML reports (if they exist)
    - |
      for f in phpunit.xml sonar-report.json phpstan-result.json; do
        [ -f "$f" ] && mv "$f" json_xml_reports-${VERSION}/ || echo "Skipped missing: $f"
      done

  artifacts:
    when: always
    paths:
      - html_reports-*/
      - json_xml_reports-*/
  rules:
    - if: "$CI_COMMIT_TAG && $CI_COMMIT_TAG !~ /(?i)prod/"
      when: manual
    - if: "$CI_COMMIT_TAG =~ /(?i)prod/"
      when: manual
    - when: never

deploy_PROD:
  stage: deploy_PROD
  image: alpine:latest

  before_script:
    - apk add --no-cache bash openssh-client curl git composer

    # SSH setup
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H "$PROD_SERVER" >> ~/.ssh/known_hosts

  script:
    - |
      ssh "$SSH_USER@$PROD_SERVER" << EOF
      set -e

      cd /var/www/eklxpartners || mkdir -p /var/www/eklxpartners && cd /var/www/eklxpartners

      # Configurer git safe.directory pour Ã©viter les warnings
      git config --global --add safe.directory /var/www/eklxpartners || true

      if [ -d ".git" ]; then
        echo "DÃ©pÃ´t git trouvÃ©, pull en cours..."
        git reset --hard
        git clean -fd
        git pull https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ekl.tn/pfe_devops/eklxpartners.git main
      else
        echo "Pas de dÃ©pÃ´t git, clonage en cours..."
        git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.ekl.tn/pfe_devops/eklxpartners.git .
      fi

      # Droits avant installation
      chown -R $SSH_USER:$SSH_USER /var/www/eklxpartners

      cd /var/www/eklxpartners

      # Injecter le .env
      echo "$ENV_PROD_CONTENT" > .env

      # Installation des dÃ©pendances PHP
      composer install --no-interaction --prefer-dist --optimize-autoloader

      # Maintenance Laravel
      php artisan down || true
      php artisan config:cache
      php artisan migrate --force
      php artisan up
      php artisan storage:link

      # Droits web
      chown -R www-data:www-data /var/www/eklxpartners

      # RedÃ©marrer Apache
      systemctl restart apache2

      EOF

  rules:
    - if: "$CI_COMMIT_TAG =~ /(?i)prod/"
      when: manual
    - when: never
